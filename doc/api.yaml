openapi: 3.0.3
info:
  title: UniDrive - OpenAPI 3.0
  description: |-
    Share part of the whole journey to the University with other students thanks to UniDrive!
    
  contact:
    email: vecchi.1938069@studenti.uniroma1.it
  license:
    name: Sapienza University
    url: https://www.uniroma1.it/it/
  version: 1.0.0
externalDocs:
  description: Find out more about the project
  url: https://www.notion.so/REPORT-2dd4406f190846dba586faa224fff91e
  
servers:
  - url: '{protocol}://UniDrive.com'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
  
tags:
  - name: Profile
    description: Represents the profile page of the user
  - name: Rides
    description: Rides actions
    

paths:

  /rides/:
    get:
      tags:
        - Rides
      summary: Search for a ride
      parameters:
      - name: origin
        in: query
        description: The starting point of the ride
        required: true
        schema:
          type: string
      - name: destination
        in: query
        description: The end point of the ride
        required: true
        schema:
          type: string
      - name: depart_hour
        in: query
        description: The date and time of the ride
        required: false
        schema:
          $ref: '#/components/schemas/depart_hour'
      responses:
        '200':
          description: A list of rides that match the search parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ride'

    post:
      tags:
          - Rides
      summary: Book a ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Confirmation of the booking
          content:

            application/json:
              schema:
                $ref: '#/components/schemas/BookingConfirmation'

  /rides/{ride_id}:
    parameters:
      - $ref: '#/components/parameters/ride_id'

    get:
      tags:
        - Rides
      summary: View the details of a ride
      responses:
        '200':
          description: The details of the ride
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
    
    delete:
      tags:
        - Rides
      summary: Delete a ride
      responses:
        '200':
          description: Confirmation of the deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
  /profile/:
    get:
      tags:
          - Profile
      summary: View the user's profile
      responses:
        '200':
          description: The user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    
  /profile/{username}:
    parameters:
      - $ref: '#/components/parameters/username'
    get:
      tags:
          - Profile
      summary: View the profile of another user
      responses:
        '200':
          description: The user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    put:
      tags:
          - Profile
      summary: Update the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Confirmation of the update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'

components:
  parameters:
    ride_id:
      name: ride_id
      in: path
      description: The ID of the ride
      required: true
      schema:
        $ref: '#/components/schemas/Ride_id'

    username:
      name: username
      in: path
      description: The name of the user
      required: true
      schema:
        $ref: '#/components/schemas/username'

  schemas:
    depart_hour:
          description: When we want to book the ride
          type: string
          format: date-time
          example: 2022-11-04T19:35:22-04:00
          minLength: 20
          maxLength: 25

    Ride_id:
      description: Unique identifier representing a specific ride
      type: string
      pattern: '^[a-zA-Z0-9-_]*$'
      minLength: 1
      maxLength: 20
      example: "U3dhZ2dlciByb2Nrcw"
      readOnly: true

    user_id:
      description: Unique identifier representing a specific user
      type: string
      pattern: '^[a-zA-Z0-9-_]*$'
      minLength: 1
      maxLength: 20
      example: "U3dhZ2dlciByb2Nrcw"
      readOnly: true

    username:
      description: The name of the user
      type: string
      example: Mario Rossi
      pattern: '^[a-zA-Z0-9-_]*$'
      minLength: 3
      maxLength: 16

    Ride:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/Ride_id'
        origin:
          description: The starting point of the ride
          type: string
          example: Via di Valle Giulia, 9, 00197 Roma RM
        destination:
          description: The end point of the ride
          type: string
          example: Piazzale Aldo Moro, 5, 00185 Roma RM
        driver:
          description: The name of the user who is offering the ride
          type: string
          example: John Doe
          pattern: '^[a-zA-Z0-9-_]*$'
          minLength: 3
          maxLength: 16
        available_seats:
          description: The number of seats available in the car
          type: integer
          example: 3
        
    Booking:
      type: object
      properties:
        ride_id:
          $ref: '#/components/schemas/Ride_id'

    BookingConfirmation:
      type: object
      properties:
        ride_id:
          $ref: '#/components/schemas/Ride_id'
        booked_in:
          description: When the booking was done
          type: string
          format: date-time
          example: 2022-11-04T19:35:22-04:00
          minLength: 20
          maxLength: 25
        confirmed:
          description: Whether the booking was successful or not
          type: boolean
          example: true

    Profile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/user_id'
        username:
          $ref: '#/components/schemas/username'
        age:
          description: Age of the user
          type: integer
          example: 21
          minimum: 18
        faculty:
          description: Faculty of the university that the user belongs to
          type: string
          example: Faculty of Economics
        profile_picture_url:
          description: URL of the profile picture. Accepting only ID attached with.png/.jpg/.jpeg extensions.
          type: string
          pattern: '^[a-zA-Z0-9-_]*\.(png|jpg|jpeg)$'
          example: "Cksvy-ZXtXRE.jpg"
          minLength: 0
          maxLength: 150
        bio:
          description: Biography of the profile. |
            Keeping the pattern simple. Not doing crazy things. Just allowing alphanumeric characters and basic punctuation.
          type: string
          pattern: '^[a-zA-Z0-9,._:;?!\x27\- ]*$'
          example: "Mario, business student at Sapienza"
          minLength: 0
          maxLength: 150
        rating:
          description: The rating of the user
          type: number
          example: 3.8
          minimum: 0
          maximum: 5
        reviews:
          description: List of reviews received by the user
          type: array
          items:
            $ref: '#/components/schemas/Review'
        rides_booked:
          description: List of rides booked by the user
          type: array
          items:
            $ref: '#/components/schemas/Ride'
        total_rides_given:
          description: Total number of rides given by the user
          type: integer
          example: 50
          minimum: 0

    Review:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/user_id'
        rating:
          description: The rating of the user
          type: integer
          example: 4
          minimum: 0
          maximum: 5
        review:
          description: The review of the user
          type: string
          example: "Mario is a great driver"
          pattern: '^[a-zA-Z0-9,._:;?!\x27\- ]*$'
          minLength: 0
          maxLength: 300





